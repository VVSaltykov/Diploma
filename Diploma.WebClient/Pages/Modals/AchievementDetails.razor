@using System.Text
@using Diploma.Common.Interfaces
@using Diploma.Common.Models
@using Microsoft.VisualBasic
@using Group = Diploma.Common.Models.Group
@using User = Telegram.Bot.Types.User
@inject IGroupService GroupService

@layout MainLayout

<RadzenTemplateForm TItem="Achievements" Data="@Achievements">
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Заголовок"/>
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@Achievements.Tittle" Name="Tittle" Disabled="true" Style="width: 100%"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Текст"/>
        </div>
        <div class="col">
            <RadzenTextArea @bind-Value="@Achievements.Text" Name="Text" Rows="5" Style="width: 100%;" Disabled="true"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Студенты"/>
        </div>
        <div class="col">
            <RadzenTextArea @bind-Value="usersText" Name="UsersText" Rows="5" Style="width: 100%;" Disabled="true"/>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public Achievements Achievements { get; set; }

    private List<Group> Groups { get; set; } = new List<Group>();
    private string usersText;

    protected override async Task OnInitializedAsync()
    {
        usersText = await GetUsersText();
    }

    private async Task<string> GetUsersText()
    {
        Groups = await GroupService.GetAll();

        try
        {
            var usersText = new StringBuilder();

            foreach (var group in Groups)
            {
                var groupUsers = Achievements.Users.Where(user => group.Users.Any(groupUser => groupUser.Id == user.Id)).ToList();
                foreach (var user in groupUsers)
                {
                    usersText.Append($"{user.Name} ({group.Name}), ");
                }
            }

            return usersText.ToString().TrimEnd(',', ' ');
        }
        catch (Exception ex)
        {
            return null;
        }
    }
}