@page "/TelegramUsers"
@using Diploma.Common.Models
@using Diploma.Common.Interfaces
@using Diploma.Common.Models.Enums
@using Diploma.Common.Utils
@using Diploma.WebClient.Pages.Modals
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@inject IAchievementsService AchievementsService
@inject DialogService DialogService

@layout MainLayout
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <RadzenButton Text="Создать достижение" Click="@OpenCreateAchievementDialog"/>
        <div class="rz-m-1 rz-mb-0" style="width: 98%; height: 98%">
            <RadzenGrid Data="@UsersTelegram" TItem="User" EmptyText="Нет пользователей" AllowFiltering="false" AllowPaging="true" PageSize="7"
                        AllowSorting="true">
                <Columns>
                    <RadzenGridColumn TItem="User" Property="Name" Title="ФИО"/>
                    <RadzenGridColumn TItem="User" Property="Role" Title="Роль">
                        <Template Context="user">
                            @user.Role.GetDisplayName()
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="User" Title="Группа">
                        <Template Context="user">
                            @if (user.Group != null)
                            {
                                @user.Group.Name
                            }
                            else
                            {
                                @("Абитуриент")
                            }
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Session? CurrentSession { get; set; }
    
    private List<User> UsersTelegram { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UsersTelegram = await UserService.GetTelegramUsers();
    }
    
    private async Task OpenCreateAchievementDialog()
    {
        var students = UsersTelegram.Where(u => u.Role == Role.Student || u.Role == Role.Graduate).ToList();
        var parameters = new Dictionary<string, object>
        {
            { "TelegramUsers", students }
        };
        
        var result = await DialogService.OpenAsync<CreateAchievement>("Отправить сообщение", parameters);
        if (result != null)
        {
            Achievements achievement = (Achievements)result;
            await AchievementsService.Create(achievement);
        }
    }
}