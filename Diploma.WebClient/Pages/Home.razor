@page "/"
@using Diploma.Common.Interfaces
@using Diploma.Common.Models
@using Diploma.Common.Services
@using Diploma.WebClient.Pages.Modals
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Group = Diploma.Common.Models.Group
@inject DialogService DialogService
@inject IUserService UserService
@inject IGroupService GroupService

@layout MainLayout
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <RadzenButton Text="Отправить сообщение" Click="@OpenSendMessageDialog"/>
        <div class="rz-m-1 rz-mb-0" style="width: 98%; height: 98%">
            <RadzenGrid Data="@MessagesList" TItem="Messages" EmptyText="Нет сообщений">
                <Columns>
                    <RadzenGridColumn TItem="Messages" Property="Tittle" Title="Название"/>
                    <RadzenGridColumn TItem="Messages" Property="DateTime" Title="Дата отправки"/>
                    <RadzenGridColumn TItem="Messages" Title="Отправитель">
                        <Template Context="message">
                            @message.User.Name
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Messages" Title="Действие">
                        <Template Context="message">
                            <RadzenButton Text="Просмотреть" Click="@(() => CheckMessageDetails(message))"/>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Messages" Title="Действие">
                        <Template Context="message">
                            <RadzenButton Text="Ответить" Click="@(() => CreateAnswer(message))"/>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Session? CurrentSession { get; set; }
    
    [Inject] protected MessagesService MessagesService { get; set; }
    
    private List<Messages> MessagesList { get; set; }
    private List<User> UsersTelegram { get; set; } = new List<User>();
    private List<Group> Groups { get; set; } = new List<Group>();
    
    bool allowVirtualization;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Groups = await GroupService.GetAll();
            UsersTelegram = await UserService.GetTelegramUsers();
            MessagesList = await MessagesService.GetAll(UsersTelegram);
            StateHasChanged();
        }
        catch (Exception ex) {}
    }

    private async Task OpenSendMessageDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "Messages", new Messages() },
            { "TelegramUsers", UsersTelegram },
            { "Groups", Groups }
        };
        
        var result = await DialogService.OpenAsync<SendMessage>("Отправить сообщение", parameters);
        if (result != null)
        {
            Messages newMessage = (Messages)result;
            newMessage.UserId = CurrentSession.User.Id;
            await MessagesService.Create(newMessage);
        }
    }

    private async Task CreateAnswer(Messages message)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Messages", message }
        };
    
        var result = await DialogService.OpenAsync<CreateAnswer>("Ответить на сообщение", parameters);
        if (result != null)
        {
            Messages newMessage = (Messages)result;
            newMessage.UserId = CurrentSession.User.Id;
            await MessagesService.Create(newMessage);
        }
    }

    private async Task CheckMessageDetails(Messages message)
    {
        var parameters = new Dictionary<string, object>
        {
            { "Messages", message }
        };
        
        await DialogService.OpenAsync<MessageDetails>("Сообщение", parameters);
    }
    
    private async Task LogoutAsync()
    {
        // Perform logout logic here
    }
}