@using Diploma.Common.Models
@using Diploma.Common.Services
@using Diploma.Common.ServicesForWeb
@using Microsoft.AspNetCore.Components.Authorization

@implements IDisposable

<CascadingValue Value="SessionsService.SessionData">
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                @Authorized
            </Authorized>
            <NotAuthorized>
                @NotAuthorized
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</CascadingValue>

@code {
    
    [Inject] public SessionsService SessionsService { get; set; }

    [Parameter]
    public RenderFragment Authorized { get; set; }

    [Parameter]
    public RenderFragment NotAuthorized { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SessionsService.OnRefreshSession += OnSessionChanged;
    }

    private Task OnSessionChanged(Session session) => InvokeAsync(StateHasChanged);

    void IDisposable.Dispose()
    {
        SessionsService.OnRefreshSession -= OnSessionChanged;
    }
}