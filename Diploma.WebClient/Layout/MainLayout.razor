@using Diploma.Common.Models
@using Diploma.Common.ServicesForWeb
@using Diploma.WebClient.Pages
@using Microsoft.AspNetCore.Components.Authorization
@using Diploma.WebClient.Layout
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@implements IDisposable
<RadzenComponents/>

<CascadingValue Value="SessionsService.SessionData">
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <RadzenLayout style="position: relative">
                    <RadzenHeader>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                            <RadzenLabel>@SessionsService.SessionData.User.Name</RadzenLabel>
                        </RadzenStack>
                    </RadzenHeader>
                    <RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded">
                        <NavMenu></NavMenu>
                    </RadzenSidebar>
                    <RadzenBody Style="background-color: white">
                            @Body
                    </RadzenBody>
                </RadzenLayout>
            </Authorized>
            <NotAuthorized>
                <RedirectToLogin/>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</CascadingValue>

@code{
    [Inject] public SessionsService SessionsService { get; set; }
    
    private bool sidebarExpanded = true;
    

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SessionsService.OnRefreshSession += OnSessionChanged;
    }

    private Task OnSessionChanged(Session session) => InvokeAsync(StateHasChanged);

    void IDisposable.Dispose()
    {
        SessionsService.OnRefreshSession -= OnSessionChanged;
    }
    
    private void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;
    }

}